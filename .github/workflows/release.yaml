name: release
on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
env:
  PACKAGE_NAME: kamu-cli
  BINARY_NAME: kamu
  KAMU_WEB_UI_VERSION: "0.12.0"
jobs:
  build_linux:
    name: Build / Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1 # Uses rust-toolchain file
        with:
          target: ${{ matrix.target }}
          override: true
      - name: Install cross
        run: cargo install cross --locked
      - name: Fetch web UI artifacts # TODO: Add target without UI
        run: |
          wget https://github.com/kamu-data/kamu-web-ui/releases/download/v${{ env.KAMU_WEB_UI_VERSION }}/kamu-web-ui-any.tar.gz && \
          tar -xf kamu-web-ui-any.tar.gz
      - name: Build
        run: >-
          KAMU_WEB_UI_DIR=../../../kamu-web-ui-any
          cross build
          -p kamu-cli
          --release
          --target=${{ matrix.target }}
          --features ftp,web-ui
      - name: Rename binary
        run: mv target/${{ matrix.target }}/release/${{ env.PACKAGE_NAME }} target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}
          if-no-files-found: error
  build_macos:
    name: Build / MacOS
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1 # Uses rust-toolchain file
      - name: Fetch web UI artifacts # TODO: Add target without UI
        run: |
          wget https://github.com/kamu-data/kamu-web-ui/releases/download/v${{ env.KAMU_WEB_UI_VERSION }}/kamu-web-ui-any.tar.gz && \
          tar -xf kamu-web-ui-any.tar.gz
      - name: Build
        run: >-
          KAMU_WEB_UI_DIR=../../../kamu-web-ui-any
          cargo build
          -p kamu-cli
          --release
          --target=${{ matrix.target }}
          --features ftp,web-ui
      - name: Rename binary
        run: mv target/${{ matrix.target }}/release/${{ env.PACKAGE_NAME }} target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}
          if-no-files-found: error
  build_windows:
    name: Build / Windows
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1 # Uses rust-toolchain file
      - name: Build
        run: >-
          cargo build
          -p kamu-cli
          --release
          --target=${{ matrix.target }}
          --features ftp
      - name: Rename binary
        shell: bash
        run: mv target/${{ matrix.target }}/release/${{ env.PACKAGE_NAME }}.exe target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe
          if-no-files-found: error
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build_linux, build_macos, build_windows]
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
  upload_assets_targz:
    name: Upload Assets (tar.gz)
    runs-on: ubuntu-latest
    needs: [create_release]
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}
          path: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}
      - name: Compress Artifacts
        run: tar -czvf ${{ env.PACKAGE_NAME }}-${{ matrix.target }}.tar.gz ${{ env.PACKAGE_NAME }}-${{ matrix.target }}
      - name: Upload Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}.tar.gz
          asset_name: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip
  upload_assets_zip:
    name: Upload Assets (zip)
    runs-on: ubuntu-latest
    needs: [create_release]
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}
          path: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}
      - name: Compress Artifacts
        run: zip -r ${{ env.PACKAGE_NAME }}-${{ matrix.target }}.zip ${{ env.PACKAGE_NAME }}-${{ matrix.target }}
      - name: Upload Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}.zip
          asset_name: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}.zip
          asset_content_type: application/gzip
