{
  "db_name": "PostgreSQL",
  "query": "\n            WITH next AS (\n                WITH projected AS (\n                    SELECT COALESCE(done, '{}'::int8multirange) AS done\n                    FROM flow_system_projected_events\n                    WHERE projector = $1\n                    UNION ALL\n                    SELECT '{}'::int8multirange AS done\n                    WHERE NOT EXISTS (\n                        SELECT 1 FROM flow_system_projected_events WHERE projector = $1\n                    )\n                    LIMIT 1\n                )\n                SELECT fse.event_id\n                FROM flow_system_events fse\n                CROSS JOIN projected\n                WHERE fse.event_id >= $2 AND fse.event_id <= $3 AND NOT (fse.event_id <@ projected.done)\n                ORDER BY fse.event_id\n                LIMIT $4\n            ),\n            merged as (\n                SELECT\n                    fse.event_id,\n                    fse.source_stream,\n                    fse.source_event_id,\n                    fse.occurred_at,\n                    fse.inserted_at,\n                    fe.event_payload\n                FROM flow_system_events fse\n                JOIN next n\n                    ON n.event_id = fse.event_id\n                JOIN flow_events fe\n                    ON fse.source_stream = 'flows'::flow_system_stream_type AND\n                        fe.event_id = fse.source_event_id\n\n                UNION ALL\n\n                SELECT\n                    fse.event_id,\n                    fse.source_stream,\n                    fse.source_event_id,\n                    fse.occurred_at,\n                    fse.inserted_at,\n                    fte.event_payload\n                FROM flow_system_events fse\n                JOIN next n\n                    ON n.event_id = fse.event_id\n                JOIN flow_trigger_events fte\n                    ON fse.source_stream = 'triggers'::flow_system_stream_type AND\n                        fte.event_id = fse.source_event_id\n\n                UNION ALL\n\n                SELECT\n                    fse.event_id,\n                    fse.source_stream,\n                    fse.source_event_id,\n                    fse.occurred_at,\n                    fse.inserted_at,\n                    fce.event_payload\n                FROM flow_system_events fse\n                JOIN next n\n                    ON n.event_id = fse.event_id\n                JOIN flow_configuration_events fce\n                    ON fse.source_stream = 'configurations'::flow_system_stream_type AND\n                        fce.event_id = fse.source_event_id\n            )\n            SELECT\n                event_id as \"event_id!\",\n                source_stream as \"source_stream!: String\",\n                source_event_id as \"source_event_id!\",\n                occurred_at as \"occurred_at!: DateTime<Utc>\",\n                inserted_at as \"inserted_at!: DateTime<Utc>\",\n                event_payload as \"event_payload!\"\n            FROM merged\n            ORDER BY event_id\n            ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "event_id!",
        "type_info": "Int8"
      },
      {
        "ordinal": 1,
        "name": "source_stream!: String",
        "type_info": {
          "Custom": {
            "name": "flow_system_stream_type",
            "kind": {
              "Enum": [
                "flows",
                "triggers",
                "configurations"
              ]
            }
          }
        }
      },
      {
        "ordinal": 2,
        "name": "source_event_id!",
        "type_info": "Int8"
      },
      {
        "ordinal": 3,
        "name": "occurred_at!: DateTime<Utc>",
        "type_info": "Timestamptz"
      },
      {
        "ordinal": 4,
        "name": "inserted_at!: DateTime<Utc>",
        "type_info": "Timestamptz"
      },
      {
        "ordinal": 5,
        "name": "event_payload!",
        "type_info": "Jsonb"
      }
    ],
    "parameters": {
      "Left": [
        "Text",
        "Int8",
        "Int8",
        "Int8"
      ]
    },
    "nullable": [
      null,
      null,
      null,
      null,
      null,
      null
    ]
  },
  "hash": "82c753a3ba5ab3f726a1bb5328b4b2e1c73ff6bd2b8b2f2609e5a6cc0349ce5e"
}
