{
  "db_name": "PostgreSQL",
  "query": "\n            WITH projected AS (\n                SELECT COALESCE(done, '{}'::int8multirange) AS done\n                FROM flow_system_projected_events\n                WHERE projector = $1\n\n                UNION ALL\n\n                SELECT '{}'::int8multirange\n                WHERE NOT EXISTS (\n                    SELECT 1 FROM flow_system_projected_events WHERE projector = $1\n                )\n\n                LIMIT 1\n            ),\n\n            flows AS (\n                SELECT\n                    f.event_id,\n                    'flows'::text         AS source_stream,\n                    f.event_id            AS source_event_id,\n                    f.event_time          AS occurred_at,\n                    f.event_payload       AS event_payload\n                FROM flow_events f\n                CROSS JOIN projected p\n                WHERE f.event_id >= $2 AND f.event_id <= $3 AND NOT (f.event_id <@ p.done)\n                ORDER BY f.event_id\n                LIMIT $4\n            ),\n\n            triggers AS (\n                SELECT\n                    t.event_id,\n                    'triggers'::text      AS source_stream,\n                    t.event_id            AS source_event_id,\n                    t.event_time          AS occurred_at,\n                    t.event_payload       AS event_payload\n                FROM flow_trigger_events t\n                CROSS JOIN projected p\n                WHERE t.event_id >= $2 AND t.event_id <= $3 AND NOT (t.event_id <@ p.done)\n                ORDER BY t.event_id\n                LIMIT $4\n            ),\n\n            configs AS (\n                SELECT\n                    c.event_id,\n                    'configurations'::text AS source_stream,\n                    c.event_id             AS source_event_id,\n                    c.event_time           AS occurred_at,\n                    c.event_payload        AS event_payload\n                FROM flow_configuration_events c\n                CROSS JOIN projected p\n                WHERE c.event_id >= $2 AND c.event_id <= $3 AND NOT (c.event_id <@ p.done)\n                ORDER BY c.event_id\n                LIMIT $4\n            ),\n\n            unioned AS (\n                SELECT * FROM flows\n                UNION ALL\n                SELECT * FROM triggers\n                UNION ALL\n                SELECT * FROM configs\n            )\n\n            SELECT\n                event_id            AS \"event_id!\",\n                source_stream       AS \"source_stream!: String\",\n                source_event_id     AS \"source_event_id!\",\n                occurred_at         AS \"occurred_at!: DateTime<Utc>\",\n                event_payload       AS \"event_payload!\"\n            FROM unioned\n            ORDER BY event_id\n            LIMIT $4;\n            ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "event_id!",
        "type_info": "Int8"
      },
      {
        "ordinal": 1,
        "name": "source_stream!: String",
        "type_info": "Text"
      },
      {
        "ordinal": 2,
        "name": "source_event_id!",
        "type_info": "Int8"
      },
      {
        "ordinal": 3,
        "name": "occurred_at!: DateTime<Utc>",
        "type_info": "Timestamptz"
      },
      {
        "ordinal": 4,
        "name": "event_payload!",
        "type_info": "Jsonb"
      }
    ],
    "parameters": {
      "Left": [
        "Text",
        "Int8",
        "Int8",
        "Int8"
      ]
    },
    "nullable": [
      null,
      null,
      null,
      null,
      null
    ]
  },
  "hash": "2bf97334fadbced82607612057e86e73111906f8c40fcd07fd614c417b9ffa74"
}
