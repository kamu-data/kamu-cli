{
  "db_name": "SQLite",
  "query": "\n            WITH next AS (\n                SELECT fse.event_id\n                FROM flow_system_events fse\n                LEFT JOIN flow_system_projected_events pe\n                    ON pe.projector = $1 AND pe.event_id = fse.event_id\n                WHERE pe.event_id IS NULL AND fse.event_id >= $2 AND fse.event_id <= $3\n                ORDER BY fse.event_id\n                LIMIT $4\n            ),\n            merged as (\n                SELECT\n                    fse.event_id,\n                    fse.source_stream,\n                    fse.source_event_id,\n                    fse.occurred_at,\n                    fse.inserted_at,\n                    fe.event_payload\n                FROM flow_system_events fse\n                JOIN next n\n                    ON n.event_id = fse.event_id\n                JOIN flow_events fe\n                    ON fse.source_stream = 'flows' AND fe.event_id = fse.source_event_id\n\n                UNION ALL\n\n                SELECT\n                    fse.event_id,\n                    fse.source_stream,\n                    fse.source_event_id,\n                    fse.occurred_at,\n                    fse.inserted_at,\n                    fte.event_payload\n                FROM flow_system_events fse\n                JOIN next n\n                    ON n.event_id = fse.event_id\n                JOIN flow_trigger_events fte\n                    ON fse.source_stream = 'triggers' AND fte.event_id = fse.source_event_id\n\n                UNION ALL\n\n                SELECT\n                    fse.event_id,\n                    fse.source_stream,\n                    fse.source_event_id,\n                    fse.occurred_at,\n                    fse.inserted_at,\n                    fce.event_payload\n                FROM flow_system_events fse\n                JOIN next n\n                    ON n.event_id = fse.event_id\n                JOIN flow_configuration_events fce\n                    ON fse.source_stream = 'configurations' AND fce.event_id = fse.source_event_id\n            )\n            SELECT\n                event_id as \"event_id!\",\n                source_stream as \"source_stream!: String\",\n                source_event_id as \"source_event_id!\",\n                occurred_at as \"occurred_at!: DateTime<Utc>\",\n                inserted_at as \"inserted_at!: DateTime<Utc>\",\n                event_payload as \"event_payload!: serde_json::Value\"\n            FROM merged\n            ORDER BY event_id\n                ",
  "describe": {
    "columns": [
      {
        "name": "event_id!",
        "ordinal": 0,
        "type_info": "Integer"
      },
      {
        "name": "source_stream!: String",
        "ordinal": 1,
        "type_info": "Text"
      },
      {
        "name": "source_event_id!",
        "ordinal": 2,
        "type_info": "Integer"
      },
      {
        "name": "occurred_at!: DateTime<Utc>",
        "ordinal": 3,
        "type_info": "Null"
      },
      {
        "name": "inserted_at!: DateTime<Utc>",
        "ordinal": 4,
        "type_info": "Null"
      },
      {
        "name": "event_payload!: serde_json::Value",
        "ordinal": 5,
        "type_info": "Null"
      }
    ],
    "parameters": {
      "Right": 4
    },
    "nullable": [
      false,
      false,
      false,
      false,
      false,
      false
    ]
  },
  "hash": "e1f8a0f28ba1ddefd5fd84cf3554a38db5e2a4a025454dd2eed9fa7b3b0d06fa"
}
