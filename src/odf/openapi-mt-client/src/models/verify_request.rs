/*
 * Kamu REST API
 *
 * You are currently running Kamu CLI in the API server mode. For a fully-featured server consider using [Kamu Node](https://docs.kamu.dev/node/).  ## Auth Some operation require an **API token**. Pass `--get-token` command line argument for CLI to generate a token for you.  ## Resources - [Documentation](https://docs.kamu.dev) - [Discord](https://discord.gg/nU6TXRQNXC) - [Other protocols](https://docs.kamu.dev/node/protocols/) - [Open Data Fabric specification](https://docs.kamu.dev/odf/) 
 *
 * The version of the OpenAPI document: 0.233.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VerifyRequest {
    /// Commitment created by the original operation
    #[serde(rename = "commitment")]
    pub commitment: Box<models::Commitment>,
    /// Inputs that will be used to reproduce the query
    #[serde(rename = "input")]
    pub input: Box<models::QueryRequest>,
    /// Signature block
    #[serde(rename = "proof")]
    pub proof: Box<models::Proof>,
    /// Information about processing performed by other nodes as part of the original operation
    #[serde(rename = "subQueries")]
    pub sub_queries: Vec<models::SubQuery>,
}

impl VerifyRequest {
    pub fn new(commitment: models::Commitment, input: models::QueryRequest, proof: models::Proof, sub_queries: Vec<models::SubQuery>) -> VerifyRequest {
        VerifyRequest {
            commitment: Box::new(commitment),
            input: Box::new(input),
            proof: Box::new(proof),
            sub_queries,
        }
    }
}

