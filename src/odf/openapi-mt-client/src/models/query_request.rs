// Copyright Kamu Data, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

/*
 * Kamu REST API
 *
 * You are currently running Kamu CLI in the API server mode. For a fully-featured server consider using [Kamu Node](https://docs.kamu.dev/node/).  ## Auth Some operation require an **API token**. Pass `--get-token` command line argument for CLI to generate a token for you.  ## Resources - [Documentation](https://docs.kamu.dev) - [Discord](https://discord.gg/nU6TXRQNXC) - [Other protocols](https://docs.kamu.dev/node/protocols/) - [Open Data Fabric specification](https://docs.kamu.dev/odf/)
 *
 * The version of the OpenAPI document: 0.233.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryRequest {
    /// How data should be laid out in the response
    #[serde(rename = "dataFormat", skip_serializing_if = "Option::is_none")]
    pub data_format: Option<models::DataFormat>,
    /// Optional information used to affix an alias to the specific
    /// [`odf::DatasetID`] and reproduce the query at a specific state in time
    #[serde(
        rename = "datasets",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub datasets: Option<Option<Vec<models::DatasetState>>>,
    /// What information to include
    #[serde(rename = "include", skip_serializing_if = "Option::is_none")]
    pub include: Option<Vec<models::Include>>,
    /// Pagination: limits number of records in response to N
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    /// Query string
    #[serde(rename = "query")]
    pub query: String,
    /// Dialect of the query
    #[serde(rename = "queryDialect", skip_serializing_if = "Option::is_none")]
    pub query_dialect: Option<models::QueryDialect>,
    /// What representation to use for the schema
    #[serde(rename = "schemaFormat", skip_serializing_if = "Option::is_none")]
    pub schema_format: Option<models::SchemaFormat>,
    /// Pagination: skips first N records
    #[serde(rename = "skip", skip_serializing_if = "Option::is_none")]
    pub skip: Option<i64>,
}

impl QueryRequest {
    pub fn new(query: String) -> QueryRequest {
        QueryRequest {
            data_format: None,
            datasets: None,
            include: None,
            limit: None,
            query,
            query_dialect: None,
            schema_format: None,
            skip: None,
        }
    }
}
