/*
 * Kamu REST API
 *
 * You are currently running Kamu CLI in the API server mode. For a fully-featured server consider using [Kamu Node](https://docs.kamu.dev/node/).  ## Auth Some operation require an **API token**. Pass `--get-token` command line argument for CLI to generate a token for you.  ## Resources - [Documentation](https://docs.kamu.dev) - [Discord](https://discord.gg/nU6TXRQNXC) - [Other protocols](https://docs.kamu.dev/node/protocols/) - [Open Data Fabric specification](https://docs.kamu.dev/odf/)
 *
 * The version of the OpenAPI document: 0.233.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UploadContext {
    #[serde(rename = "fields")]
    pub fields: Vec<Vec<serde_json::Value>>,
    #[serde(rename = "headers")]
    pub headers: Vec<Vec<serde_json::Value>>,
    #[serde(rename = "method")]
    pub method: String,
    #[serde(rename = "uploadToken")]
    pub upload_token: String,
    #[serde(rename = "uploadUrl")]
    pub upload_url: String,
    #[serde(rename = "useMultipart")]
    pub use_multipart: bool,
}

impl UploadContext {
    pub fn new(
        fields: Vec<Vec<serde_json::Value>>,
        headers: Vec<Vec<serde_json::Value>>,
        method: String,
        upload_token: String,
        upload_url: String,
        use_multipart: bool,
    ) -> UploadContext {
        UploadContext {
            fields,
            headers,
            method,
            upload_token,
            upload_url,
            use_multipart,
        }
    }
}
