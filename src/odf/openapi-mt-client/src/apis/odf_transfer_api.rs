// Copyright Kamu Data, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

/*
 * Kamu REST API
 *
 * You are currently running Kamu CLI in the API server mode. For a fully-featured server consider using [Kamu Node](https://docs.kamu.dev/node/).  ## Auth Some operation require an **API token**. Pass `--get-token` command line argument for CLI to generate a token for you.  ## Resources - [Documentation](https://docs.kamu.dev) - [Discord](https://discord.gg/nU6TXRQNXC) - [Other protocols](https://docs.kamu.dev/node/protocols/) - [Open Data Fabric specification](https://docs.kamu.dev/odf/)
 *
 * The version of the OpenAPI document: 0.233.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;

use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use serde::de::Error as _;
use serde::{Deserialize, Serialize};

use super::{configuration, Error};
use crate::apis::{ContentType, ResponseContent};
use crate::models;

#[cfg_attr(feature = "mockall", automock)]
#[async_trait]
pub trait OdfTransferApi: Send + Sync {
    /// GET /{account_name}/{dataset_name}/blocks/{block_hash}
    ///
    async fn dataset_blocks_handler(
        &self,
        params: DatasetBlocksHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetBlocksHandlerError>>;

    /// GET /{account_name}/{dataset_name}/checkpoints/{physical_hash}
    ///
    async fn dataset_checkpoints_get_handler(
        &self,
        params: DatasetCheckpointsGetHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetCheckpointsGetHandlerError>>;

    /// PUT /{account_name}/{dataset_name}/checkpoints/{physical_hash}
    ///
    async fn dataset_checkpoints_put_handler(
        &self,
        params: DatasetCheckpointsPutHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetCheckpointsPutHandlerError>>;

    /// GET /{account_name}/{dataset_name}/data/{physical_hash}
    ///
    async fn dataset_data_get_handler(
        &self,
        params: DatasetDataGetHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetDataGetHandlerError>>;

    /// PUT /{account_name}/{dataset_name}/data/{physical_hash}
    ///
    async fn dataset_data_put_handler(
        &self,
        params: DatasetDataPutHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetDataPutHandlerError>>;

    /// GET /{account_name}/{dataset_name}/pull
    ///
    async fn dataset_pull_ws_upgrade_handler(
        &self,
        params: DatasetPullWsUpgradeHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetPullWsUpgradeHandlerError>>;

    /// GET /{account_name}/{dataset_name}/push
    ///
    async fn dataset_push_ws_upgrade_handler(
        &self,
        params: DatasetPushWsUpgradeHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetPushWsUpgradeHandlerError>>;

    /// GET /{account_name}/{dataset_name}/refs/{reference}
    ///
    async fn dataset_refs_handler(
        &self,
        params: DatasetRefsHandlerParams,
    ) -> Result<String, Error<DatasetRefsHandlerError>>;
}

pub struct OdfTransferApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl OdfTransferApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

/// struct for passing parameters to the method [`dataset_blocks_handler`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DatasetBlocksHandlerParams {
    /// Hash of the block
    pub block_hash: String,
    /// Name of the account
    pub account_name: String,
    /// Name of the dataset
    pub dataset_name: String,
}

/// struct for passing parameters to the method
/// [`dataset_checkpoints_get_handler`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DatasetCheckpointsGetHandlerParams {
    /// Physical hash of the block
    pub physical_hash: String,
    /// Name of the account
    pub account_name: String,
    /// Name of the dataset
    pub dataset_name: String,
}

/// struct for passing parameters to the method
/// [`dataset_checkpoints_put_handler`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DatasetCheckpointsPutHandlerParams {
    /// Physical hash of the block
    pub physical_hash: String,
    /// Name of the account
    pub account_name: String,
    /// Name of the dataset
    pub dataset_name: String,
    pub request_body: Vec<i32>,
}

/// struct for passing parameters to the method [`dataset_data_get_handler`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DatasetDataGetHandlerParams {
    /// Physical hash of the block
    pub physical_hash: String,
    /// Name of the account
    pub account_name: String,
    /// Name of the dataset
    pub dataset_name: String,
}

/// struct for passing parameters to the method [`dataset_data_put_handler`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DatasetDataPutHandlerParams {
    /// Physical hash of the block
    pub physical_hash: String,
    /// Name of the account
    pub account_name: String,
    /// Name of the dataset
    pub dataset_name: String,
    pub request_body: Vec<i32>,
}

/// struct for passing parameters to the method
/// [`dataset_pull_ws_upgrade_handler`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DatasetPullWsUpgradeHandlerParams {
    /// Name of the account
    pub account_name: String,
    /// Name of the dataset
    pub dataset_name: String,
}

/// struct for passing parameters to the method
/// [`dataset_push_ws_upgrade_handler`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DatasetPushWsUpgradeHandlerParams {
    /// Name of the account
    pub account_name: String,
    /// Name of the dataset
    pub dataset_name: String,
}

/// struct for passing parameters to the method [`dataset_refs_handler`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DatasetRefsHandlerParams {
    /// Name of the reference
    pub reference: String,
    /// Name of the account
    pub account_name: String,
    /// Name of the dataset
    pub dataset_name: String,
}

#[async_trait]
impl OdfTransferApi for OdfTransferApiClient {
    async fn dataset_blocks_handler(
        &self,
        params: DatasetBlocksHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetBlocksHandlerError>> {
        let DatasetBlocksHandlerParams {
            block_hash,
            account_name,
            dataset_name,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/{account_name}/{dataset_name}/blocks/{block_hash}",
            local_var_configuration.base_path,
            block_hash = crate::apis::urlencode(block_hash),
            account_name = crate::apis::urlencode(account_name),
            dataset_name = crate::apis::urlencode(dataset_name)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to \
                         `serde_json::Value`",
                    )))
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `serde_json::Value`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<DatasetBlocksHandlerError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn dataset_checkpoints_get_handler(
        &self,
        params: DatasetCheckpointsGetHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetCheckpointsGetHandlerError>> {
        let DatasetCheckpointsGetHandlerParams {
            physical_hash,
            account_name,
            dataset_name,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/{account_name}/{dataset_name}/checkpoints/{physical_hash}",
            local_var_configuration.base_path,
            physical_hash = crate::apis::urlencode(physical_hash),
            account_name = crate::apis::urlencode(account_name),
            dataset_name = crate::apis::urlencode(dataset_name)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to \
                         `serde_json::Value`",
                    )))
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `serde_json::Value`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<DatasetCheckpointsGetHandlerError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn dataset_checkpoints_put_handler(
        &self,
        params: DatasetCheckpointsPutHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetCheckpointsPutHandlerError>> {
        let DatasetCheckpointsPutHandlerParams {
            physical_hash,
            account_name,
            dataset_name,
            request_body,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/{account_name}/{dataset_name}/checkpoints/{physical_hash}",
            local_var_configuration.base_path,
            physical_hash = crate::apis::urlencode(physical_hash),
            account_name = crate::apis::urlencode(account_name),
            dataset_name = crate::apis::urlencode(dataset_name)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to \
                         `serde_json::Value`",
                    )))
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `serde_json::Value`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<DatasetCheckpointsPutHandlerError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn dataset_data_get_handler(
        &self,
        params: DatasetDataGetHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetDataGetHandlerError>> {
        let DatasetDataGetHandlerParams {
            physical_hash,
            account_name,
            dataset_name,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/{account_name}/{dataset_name}/data/{physical_hash}",
            local_var_configuration.base_path,
            physical_hash = crate::apis::urlencode(physical_hash),
            account_name = crate::apis::urlencode(account_name),
            dataset_name = crate::apis::urlencode(dataset_name)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to \
                         `serde_json::Value`",
                    )))
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `serde_json::Value`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<DatasetDataGetHandlerError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn dataset_data_put_handler(
        &self,
        params: DatasetDataPutHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetDataPutHandlerError>> {
        let DatasetDataPutHandlerParams {
            physical_hash,
            account_name,
            dataset_name,
            request_body,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/{account_name}/{dataset_name}/data/{physical_hash}",
            local_var_configuration.base_path,
            physical_hash = crate::apis::urlencode(physical_hash),
            account_name = crate::apis::urlencode(account_name),
            dataset_name = crate::apis::urlencode(dataset_name)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to \
                         `serde_json::Value`",
                    )))
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `serde_json::Value`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<DatasetDataPutHandlerError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn dataset_pull_ws_upgrade_handler(
        &self,
        params: DatasetPullWsUpgradeHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetPullWsUpgradeHandlerError>> {
        let DatasetPullWsUpgradeHandlerParams {
            account_name,
            dataset_name,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/{account_name}/{dataset_name}/pull",
            local_var_configuration.base_path,
            account_name = crate::apis::urlencode(account_name),
            dataset_name = crate::apis::urlencode(dataset_name)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to \
                         `serde_json::Value`",
                    )))
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `serde_json::Value`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<DatasetPullWsUpgradeHandlerError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn dataset_push_ws_upgrade_handler(
        &self,
        params: DatasetPushWsUpgradeHandlerParams,
    ) -> Result<serde_json::Value, Error<DatasetPushWsUpgradeHandlerError>> {
        let DatasetPushWsUpgradeHandlerParams {
            account_name,
            dataset_name,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/{account_name}/{dataset_name}/push",
            local_var_configuration.base_path,
            account_name = crate::apis::urlencode(account_name),
            dataset_name = crate::apis::urlencode(dataset_name)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to \
                         `serde_json::Value`",
                    )))
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `serde_json::Value`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<DatasetPushWsUpgradeHandlerError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn dataset_refs_handler(
        &self,
        params: DatasetRefsHandlerParams,
    ) -> Result<String, Error<DatasetRefsHandlerError>> {
        let DatasetRefsHandlerParams {
            reference,
            account_name,
            dataset_name,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/{account_name}/{dataset_name}/refs/{reference}",
            local_var_configuration.base_path,
            reference = crate::apis::urlencode(reference),
            account_name = crate::apis::urlencode(account_name),
            dataset_name = crate::apis::urlencode(dataset_name)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => return Ok(local_var_content),
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `String`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<DatasetRefsHandlerError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`dataset_blocks_handler`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DatasetBlocksHandlerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dataset_checkpoints_get_handler`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DatasetCheckpointsGetHandlerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dataset_checkpoints_put_handler`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DatasetCheckpointsPutHandlerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dataset_data_get_handler`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DatasetDataGetHandlerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dataset_data_put_handler`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DatasetDataPutHandlerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dataset_pull_ws_upgrade_handler`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DatasetPullWsUpgradeHandlerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dataset_push_ws_upgrade_handler`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DatasetPushWsUpgradeHandlerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dataset_refs_handler`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DatasetRefsHandlerError {
    UnknownValue(serde_json::Value),
}
