// Copyright Kamu Data, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

use std::path::{Path, PathBuf};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// Represents a file on local FS that should either be consumed using
/// [`OwnedFile::into_inner`()] or will be cleaned up on drop. Is typically used
/// to commit data and checkpoints generated by the engines into a dataset.
#[derive(Debug)]
pub struct OwnedFile {
    path: Option<PathBuf>,
}

impl OwnedFile {
    pub fn new(path: impl Into<PathBuf>) -> Self {
        let path = path.into();
        assert!(path.exists());
        Self { path: Some(path) }
    }

    pub fn as_path(&self) -> &Path {
        self.path.as_ref().unwrap().as_path()
    }

    pub fn into_inner(mut self) -> PathBuf {
        self.path.take().unwrap()
    }
}

impl Drop for OwnedFile {
    fn drop(&mut self) {
        if let Some(path) = self.path.take() {
            let _ = std::fs::remove_file(path);
        }
    }
}
